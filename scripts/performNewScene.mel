// Copyright (C) 1997-2004 Alias Systems Corp.
// 
// The information in this file is provided for the exclusive use of the
// licensees of Alias.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias license agreement, without fee.
// 
// ALIAS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.

//  Procedure Name:
//      performNewScene
//
//  Description:
//        
//         
//  Input Arguments:
//        $option : Whether to set the options to default values.
//  Return Value:
//        None
//

proc setOptionVars (int	$forceFactorySettings)
{
	if ($forceFactorySettings || !`optionVar -exists "newFileEnabled"`)
		optionVar -intValue "newFileEnabled" 0;

	if ($forceFactorySettings || !`optionVar -exists "newFileName"`)
		optionVar -stringValue "newFileName" "";

}

global proc newFileSetup (string $parent, int $forceFactorySettings)
{
	setOptionVars($forceFactorySettings);
	setParent $parent;

	checkBoxGrp
		-edit
		-value1 `optionVar -query newFileEnabled`
		newFileEnabled;

	textField
		-edit
		-text `optionVar -query newFileName`
		newFileName;

}

global proc newFileCallback (string $parent, int $doIt)
{	
	setParent $parent;

	optionVar -intValue "newFileEnabled"
		`checkBoxGrp -query -value1 newFileEnabled`;

	optionVar -stringValue "newFileName"
		`textField -query -text newFileName`;

	if ($doIt) 
	{
		performNewScene 0;
		string $tmpCmd = "performNewScene 0 ";
		addToRecentCommandQueue $tmpCmd "New Scene";
	}
}

proc newFileOptions ()
{
	string $commandName = "newFile";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");
	//	STEP 1:  Get the option box.
	//	============================
	//
	string $layout = getOptionBox();
	setParent $layout;
	//	STEP 2:  Pass the command name to the option box.
	//	=================================================
	//
	setOptionBoxCommandName("New Scene Options");
	//	STEP 3:  Activate the default UI template.
	//	==========================================
	//
	setUITemplate -pushTemplate DefaultTemplate;
	//	STEP 4: Create option box contents.
	//	===================================
	//
	waitCursor -state 1;
	
	string $parent = `columnLayout -adjustableColumn 1`;

	//frameLayout -label "Image" 
	//	-labelAlign "center"
	//	-borderStyle "etchedIn"
	//	-collapsable 0;

	columnLayout;

	//checkbox for default on/off
	checkBoxGrp
		-label ""
		-label1 "Enable Default Scene"
		-numberOfCheckBoxes 1
		-offCommand ("text -edit -enable 0 newFileText;"+
			"textField -edit -enable 0 newFileName;" +
			"symbolButton -edit -enable 0 newFileSymbolButton")
		-onCommand ("text -edit -enable 1 newFileText;"+
			"textField -edit -enable 1 newFileName;" +
			"symbolButton -edit -enable 1 newFileSymbolButton")
		newFileEnabled;

	rowLayout -numberOfColumns 3
		-columnWidth 2 212 
		-columnWidth 3 25
		defaultSceneLayout;
		text -label "Default Scene" 
			-enable `optionVar -query "newFileEnabled"`
			newFileText;
		textField 
			-enable `optionVar -query "newFileEnabled"`
			newFileName;
		symbolButton 
			-image "navButtonBrowse.xpm"
			-enable `optionVar -query "newFileEnabled"`
			-command "string $newFileName = `fileDialog`; textField -edit -text $newFileName newFileName"
			newFileSymbolButton;
		setParent ..;

	
	//setParent ..;

	setParent ..;
	
	setParent -menu ..;

	waitCursor -state 0;
	//	Step 5: Deactivate the default UI template.
	//	===========================================
	//
	setUITemplate -popTemplate;

	//	Step 6: Customize the buttons.  
	//	==============================
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit 
		-label "Apply"
		-command ($callback + " " + $parent + " " + 1) 
		$applyBtn;
	
	string $applyAndCloseBtn = getOptionBoxApplyAndCloseBtn();
	button -edit 
		-label "New"
		$applyAndCloseBtn;

	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + " " +"; hideOptionBox")
		$saveBtn;

	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	//	Step 7: Set the option box title.
	//	=================================
	//
	setOptionBoxTitle("New Scene Options");
	//	Step 8: Customize the 'Help' menu item text.
	//	============================================
	//
	setOptionBoxHelpTag("NewSceneOptions");
	//	Step 9: Set the current values of the option box.
	//	=================================================
	//
	eval (($setup + " " + $parent + " " + 0));
	//	Step 10: Show the option box.
	//	=============================
	//
	showOptionBox();
}


proc string assembleCmd()
{
	setOptionVars (false);

	//int $doHistory = `constructionHistory -q -toggle`;

	string $cmd = "checkForUnknownNodes(); saveChanges(\"file -f -new\");";
	
	if ((`optionVar -query "newFileEnabled"` == 1) && (`optionVar -query "newFileName"` != "")){
		$cmd += "file -import \"";
		$cmd += `optionVar -query "newFileName"`;
		$cmd += " \";";
	}

	return $cmd;	
}


global proc string performNewScene (int $option)
{
	string $cmd="";

	switch ($option) 
	{
		case 0:
			$cmd = `assembleCmd`;
			eval($cmd);
			break;
		case 1:
			newFileOptions;
			break;
		case 2:
			$cmd = `assembleCmd`;
			break;
	}
	return $cmd;
}
